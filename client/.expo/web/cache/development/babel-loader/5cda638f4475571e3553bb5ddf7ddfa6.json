{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"C:\\\\Users\\\\cwpul\\\\Desktop\\\\Projects\\\\MovieLibrary\\\\src\\\\displayAll.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport SectionList from \"react-native-web/dist/exports/SectionList\";\nimport { Picker } from '@react-native-picker/picker';\nimport seedMovies from \"../movieData\";\n\nvar DisplayAll = function DisplayAll() {\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      sections = _useState2[0],\n      setSections = _useState2[1];\n\n  useEffect(function () {\n    sectionedList('title');\n  }, []);\n  var movies = seedMovies.movies;\n  var sortTitle = movies.reduce(function (obj, movie) {\n    var firstLetter = movie.title[0].toUpperCase();\n    var ascii = firstLetter.charCodeAt();\n\n    if (ascii >= 48 && ascii <= 57) {\n      firstLetter = '#';\n    }\n\n    return _objectSpread(_objectSpread({}, obj), {}, _defineProperty({}, firstLetter, [].concat(_toConsumableArray(obj[firstLetter] || []), [movie])));\n  }, {});\n  var sortGenre = movies.reduce(function (obj, movie) {\n    movie.genre.forEach(function (genre) {\n      obj[genre] = [].concat(_toConsumableArray(obj[genre] || []), [movie]);\n    });\n    return obj;\n  }, {});\n\n  var sectionedList = function sectionedList(sortValue) {\n    var sortType;\n\n    switch (sortValue) {\n      case 'title':\n        sortType = sortTitle;\n        break;\n\n      case 'genre':\n        sortType = sortGenre;\n        break;\n\n      default:\n        sortType = sortTitle;\n    }\n\n    var newSections = Object.keys(sortType).sort().map(function (item) {\n      return {\n        heading: item,\n        data: sortType[item]\n      };\n    });\n    setSections(newSections);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, \"Heading\"), React.createElement(Picker, {\n    style: {\n      height: 50,\n      width: 100\n    },\n    onValueChange: function onValueChange(itemValue) {\n      return sectionedList(itemValue);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 17\n    }\n  }, React.createElement(Picker.Item, {\n    label: \"Title\",\n    value: \"title\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 21\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"Genre\",\n    value: \"genre\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 21\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"Format\",\n    value: \"format\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 21\n    }\n  }), React.createElement(Picker.Item, {\n    label: \"Actor\",\n    value: \"actor\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 21\n    }\n  }), \" //TODO get list of actor last names and sorted\", React.createElement(Picker.Item, {\n    label: \"Director\",\n    value: \"director\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 21\n    }\n  })), React.createElement(TextInput, {\n    onChangeText: function onChangeText() {\n      return console.log('text => onChangeText(text)');\n    },\n    value: console.log('value'),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 17\n    }\n  }), React.createElement(SectionList, {\n    sections: sections,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item;\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 43\n        }\n      }, item.title);\n    },\n    renderSectionHeader: function renderSectionHeader(_ref2) {\n      var heading = _ref2.section.heading;\n      return React.createElement(Text, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 68\n        }\n      }, heading);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 13\n    }\n  }));\n};\n\nexport default DisplayAll;","map":{"version":3,"sources":["C:/Users/cwpul/Desktop/Projects/MovieLibrary/src/displayAll.js"],"names":["React","useEffect","useState","Picker","seedMovies","DisplayAll","sections","setSections","sectionedList","movies","sortTitle","reduce","obj","movie","firstLetter","title","toUpperCase","ascii","charCodeAt","sortGenre","genre","forEach","sortValue","sortType","newSections","Object","keys","sort","map","item","heading","data","height","width","itemValue","console","log","section"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\r\nimport { Text, TextInput, SectionList } from 'react-native';\r\nimport { Picker } from '@react-native-picker/picker';\r\nimport seedMovies from '../movieData';\r\n\r\nconst DisplayAll = () => {\r\n    const [sections, setSections] = useState(null);\r\n    useEffect(() => {\r\n        sectionedList('title');\r\n    }, []);\r\n    //TODO when sort option is selected, send req to server for new sorted list\r\n    const { movies } = seedMovies;\r\n\r\n    // create object of all movies where the key = first letter of the title and the value = array of all movies starting with the key\r\n    const sortTitle = movies.reduce((obj, movie) => {\r\n        let firstLetter = movie.title[0].toUpperCase();\r\n        const ascii = firstLetter.charCodeAt();\r\n        if (ascii >= 48 && ascii <= 57) {\r\n            firstLetter = '#';\r\n        }\r\n        return {\r\n            ...obj,\r\n            [firstLetter]: [...(obj[firstLetter] || []), movie]\r\n        }\r\n    }, {});\r\n\r\n    // create object of all movies where key = a genre and value = array of all movies in genre. Movie may appear in more than one genre\r\n    const sortGenre = movies.reduce((obj, movie) => {\r\n        movie.genre.forEach(genre => {\r\n            obj[genre] = [...(obj[genre] || []), movie]\r\n        });\r\n        return obj;\r\n    }, {});\r\n\r\n    // const sectionedGenre = Object.keys(sortGenre).sort().map(genre => ({\r\n    //     heading: genre,\r\n    //     data: sortGenre[genre]\r\n    // }));\r\n\r\n    \r\n    // // sort new object by keys and format to specifications of 'SectionList'\r\n    // const sectionedTitle = Object.keys(sortTitle).sort().map(letter => ({\r\n    //     heading: letter,\r\n    //     data: sortTitle[letter]\r\n    // }));\r\n\r\n    const sectionedList = (sortValue) => {\r\n        let sortType;\r\n        switch (sortValue) {\r\n            case 'title':\r\n                sortType = sortTitle;\r\n                break;\r\n            case 'genre':\r\n                sortType = sortGenre;\r\n                break;\r\n            default:\r\n                sortType = sortTitle;\r\n        }\r\n\r\n        const newSections = Object.keys(sortType).sort().map(item => ({\r\n            heading: item,\r\n            data: sortType[item]\r\n        }));\r\n\r\n        setSections(newSections);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Text>{}</Text>\r\n            <Text>Heading</Text>\r\n                <Picker\r\n                    \r\n                    style={{ height: 50, width: 100 }}\r\n                    onValueChange={(itemValue) => \r\n                        sectionedList(itemValue)\r\n                    }\r\n                >\r\n                    <Picker.Item label=\"Title\" value=\"title\" />\r\n                    <Picker.Item label=\"Genre\" value=\"genre\" />\r\n                    <Picker.Item label=\"Format\" value=\"format\" />\r\n                    <Picker.Item label=\"Actor\" value=\"actor\" /> //TODO get list of actor last names and sorted\r\n                    <Picker.Item label=\"Director\" value=\"director\" />\r\n                </Picker>\r\n                \r\n                <TextInput\r\n                    onChangeText={() => console.log('text => onChangeText(text)')}\r\n                    value={console.log('value')}\r\n                />\r\n            <SectionList\r\n                sections={sections}\r\n                renderItem={({ item }) => <Text>{item.title}</Text>}\r\n                renderSectionHeader={({ section: { heading } }) => <Text>{heading}</Text>}\r\n            />\r\n        </>\r\n    );\r\n}\r\n\r\nexport default DisplayAll;"]},"metadata":{},"sourceType":"module"}